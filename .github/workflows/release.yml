# .github/workflows/release.yml

name: Create EAS Build and Release

on:
  # REAL TRIGGER: This is what you'll use in production.
  push:
    tags:
      - 'v*'
  
  # TEST TRIGGER: Add this to allow manual runs from the Actions tab.
  workflow_dispatch:

# Set permissions for the GITHUB_TOKEN to allow creating releases
permissions:
  contents: write

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install dependencies
        run: npm install

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Make build script executable
        run: chmod +x .github/scripts/build_and_download.sh

      - name: Get version
        id: get_version
        # If it's a real tag push, use the tag. Otherwise, use a test version.
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "APP_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "APP_VERSION=0.0.0-test" >> $GITHUB_ENV
          fi

      - name: Run EAS Build and Download APK
        run: .github/scripts/build_and_download.sh

      - name: Upload APK as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: builds/audioscape${{ env.APP_VERSION }}.apk

  create-release:
    name: Approve and Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    environment:
      name: Production Release
      url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          # The download action places files in the current directory
          path: . 

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "APP_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "APP_VERSION=0.0.0-test" >> $GITHUB_ENV
          fi
      
      - name: Find APK file
        id: find_apk
        run: |
          APK_FILE=$(find . -name "audioscape*.apk")
          echo "apk_path=${APK_FILE}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.APP_VERSION }} # Use a test tag for manual runs
          name: Test Release ${{ env.APP_VERSION }}
          generate_release_notes: true
          # THIS IS THE KEY FOR TESTING: Mark it as a pre-release
          prerelease: true 
          files: ${{ env.apk_path }}
